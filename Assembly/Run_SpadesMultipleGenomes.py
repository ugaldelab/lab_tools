import os
import sys
import subprocess
from Bio import SeqIO
import argparse


def run_spades(sw_path, r1, r2, threads, output):
    """
    Function that run spades on a set of reads

    :param sw_path: Path to Spades
    :param r1: Forward read
    :param r2: Reverse read
    :param threads: Number of threads to use
    :param output: Output folder
    :return:
    """

    try:
        subprocess.call([sw_path, "-1", r1, "-2", r2, "-t", threads, "-o", output, "--careful", "--cov-cutoff", "auto"])

    except OSError as e:
        if e.errno == os.errno.ENOENT:
            sys.exit("Spades path not found")
        else:
            sys.exit("Error with the input files")

def rename_contigs(prefix):
    """
    Function used to rename the contigs generated by Spades (NODEXX), with the name
    of the genome or project
    :param prefix: Prefix to use for the genome
    :return:
    """

    contig_file = prefix + "/contigs.fasta"
    output_file = prefix + "/" + prefix + ".fasta"
    renamed_contig_info = []
    contig_table = []

    # Id counter
    count = 1

    for record in SeqIO.parse(open(contig_file, 'r'), "fasta"):
        coverage = float(record.id.split("_")[5])
        length = len(record.seq)

        # replace the name
        new_name = prefix + "_" + str(count)
        record.id = new_name
        record.name = ''
        record.description = ''

        # Store the information
        contig_table.append([new_name, str(coverage), str(length)])

        renamed_contig_info.append(record)
        count += 1

    SeqIO.write(renamed_contig_info, open(output_file, 'w'), "fasta")

    output_table = open(prefix + "/" + prefix + ".tab", 'w')

    for entry in contig_table:
        output_table.write("\t".join(entry) + "\n")

    output_table.close()
    contig_count = len(contig_table)
    assembly_size = sum([int(i[2]) for i in contig_table])

    average_coverage = sum([float(i[1]) for i in contig_table]) / contig_count

    return contig_count, assembly_size, average_coverage

# _______________

program_description = "Script useful to assemble multiple genomes using Spades. The parameters used within the script" \
                      "are:" \
                      "--cov-cutoff auto" \
                      "--careful" \
                      "" \
                      "The user needs to provide the number of threads to use." \
                      "" \
                      "Also, this script will replace the default name of the contigs in Spades (nodeXXX), with the"\
                      "names of the genomes (GenomeXXX)"\

parser = argparse.ArgumentParser(description=program_description)
parser.add_argument("-i", "--input_list", type=str, required=True,
                    help="Table with the genomes to assemble. This is a table with 3 columns. The first is the genome"
                         "prefix to use. The second is the path forward read, the third is the path to the reverse read")

parser.add_argument("-s", "--spades_version", type=str, required=True, help="Path to SPades.py")
parser.add_argument("-c", "--cpu", type=str, required=True, help="Number of threads to use")
args = parser.parse_args()


# Open the list and start running Spades

report_file = open("assembly_report.txt", 'w')

for line in open(args.input_list, 'r'):
    line = line.rstrip()

    genome_name, forward, reverse = line.split("\t")

    run_spades(args.spades_version, forward, reverse, args.cpu, genome_name)

    total_contigs, size, avg_coverage = rename_contigs(genome_name)

    report_output = [genome_name, str(total_contigs), str(size), str(avg_coverage)]
    report_file.write("\t".join(report_output) + "\n")

report_file.close()
